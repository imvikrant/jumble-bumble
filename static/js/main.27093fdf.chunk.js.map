{"version":3,"sources":["logo.svg","components/Word.jsx","components/OptionGrid.jsx","actions/actionCreators.js","actions/actionTypes.js","sentenceList.js","reducers/reducer.js","components/AnswerGrid.jsx","components/QuestionGrid.jsx","components/NextButton.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Word","word","addWord","className","onClick","connect","state","words","optionGrid","correct","type","map","i","key","isArrayEqual","a1","a2","length","shuffle","arr","temporaryValue","randomIndex","array","currentIndex","Math","floor","random","initialState","sentence","sentenceList","split","answerGrid","sentenceIndex","reducer","action","newState","concat","filter","sentenceArray","removeWord","join","nextSentence","App","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27093fdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Word.css';\r\n\r\nconst Word = ({ word, addWord }) => {\r\n  return (\r\n    <div className=\"word\" onClick={() => addWord(word)}>\r\n      {word}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Word;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Word from './Word';\r\nimport { addWord } from './../actions/actionCreators';\r\n\r\nconst OptionGrid = ({ words, addWord, correct }) => {\r\n  return (\r\n    <div>\r\n      {correct ||\r\n        words.map((word, i) => (\r\n          <Word key={`option${i}`} word={word} addWord={addWord} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    words: state.optionGrid,\r\n    correct: state.correct\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addWord }\r\n)(OptionGrid);\r\n","import { ADD_WORD, REMOVE_WORD, NEW_SENTENCE } from './actionTypes';\r\n\r\nexport const addWord = word => {\r\n  return {\r\n    type: ADD_WORD,\r\n    word\r\n  };\r\n};\r\n\r\nexport const removeWord = word => {\r\n  return {\r\n    type: REMOVE_WORD,\r\n    word\r\n  };\r\n};\r\n\r\nexport const nextSentence = word => {\r\n  return {\r\n    type: NEW_SENTENCE\r\n  };\r\n};\r\n","export const ADD_WORD = 'ADD_WORD';\r\nexport const REMOVE_WORD = 'REMOVE_WORD';\r\nexport const NEW_SENTENCE = 'NEW_SENTENCE';\r\n","export default [\r\n  'he is a good boy',\r\n  'my name is Ross',\r\n  'he is my friend',\r\n  'how are you?',\r\n  'what is your name?'\r\n];\r\n","import { ADD_WORD, REMOVE_WORD, NEW_SENTENCE } from './../actions/actionTypes';\r\nimport sentenceList from '../sentenceList';\r\n\r\nconst isArrayEqual = (a1, a2) => {\r\n  if (a1.length !== a2.length) return false;\r\n  for (let i = 0; i < a1.length; i++) {\r\n    if (a1[i] !== a2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction shuffle(arr) {\r\n  const array = [...arr];\r\n\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  while (0 !== currentIndex) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nconst initialState = {\r\n  sentence: sentenceList[0].split(' '),\r\n  answerGrid: [],\r\n  optionGrid: shuffle(sentenceList[0].split(' ')),\r\n  sentenceIndex: 0,\r\n  correct: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_WORD:\r\n      const newState = {\r\n        ...state,\r\n        answerGrid: state.answerGrid.concat(action.word),\r\n        optionGrid: state.optionGrid.filter(word => word != action.word)\r\n      };\r\n\r\n      if (isArrayEqual(newState.answerGrid, newState.sentence)) {\r\n        return { ...newState, correct: 'You are correct' };\r\n      } else {\r\n        return newState;\r\n      }\r\n\r\n    case REMOVE_WORD:\r\n      return {\r\n        ...state,\r\n        answerGrid: state.answerGrid.filter(word => word != action.word),\r\n        optionGrid: state.optionGrid.concat(action.word)\r\n      };\r\n\r\n    case NEW_SENTENCE:\r\n      const sentenceIndex =\r\n        state.sentenceIndex + 1 === sentenceList.length\r\n          ? 0\r\n          : state.sentenceIndex + 1;\r\n      const sentenceArray = sentenceList[sentenceIndex].split(' ');\r\n      return {\r\n        ...state,\r\n        sentence: sentenceArray,\r\n        sentenceIndex,\r\n        answerGrid: [],\r\n        optionGrid: shuffle(sentenceArray),\r\n        correct: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport Word from './Word';\r\nimport { connect } from 'react-redux';\r\nimport { removeWord } from './../actions/actionCreators';\r\n\r\nconst AnswerGrid = ({ words, removeWord }) => {\r\n  return (\r\n    <div>\r\n      {words.map((word, i) => (\r\n        <Word key={`answer${i}`} word={word} addWord={removeWord} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    words: state.answerGrid\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { removeWord }\r\n)(AnswerGrid);\r\n","import React from 'react';\r\nimport Word from './Word';\r\nimport { connect } from 'react-redux';\r\n\r\nconst QuestionGrid = ({ words }) => {\r\n  return <div>{words.join(' ')}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    words: state.sentence\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(QuestionGrid);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { nextSentence } from './../actions/actionCreators';\r\n\r\nconst NextButton = ({ nextSentence }) => {\r\n  return (\r\n    <div>\r\n      <button onClick={nextSentence}>Next</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { nextSentence }\r\n)(NextButton);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OptionGrid from './components/OptionGrid';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/reducer';\nimport AnswerGrid from './components/AnswerGrid';\nimport QuestionGrid from './components/QuestionGrid';\nimport NextButton from './components/NextButton';\n\nfunction App() {\n  return (\n    <Provider store={createStore(reducer)}>\n      <div className=\"App\">\n        <QuestionGrid />\n        <AnswerGrid />\n        <OptionGrid />\n        <NextButton />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}